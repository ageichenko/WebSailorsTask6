var p = 20;
function test (){
	P = 30; // так как нет 'use strict', то создается новая переменная P, иначе была юы ошибка
	var p = 25; // создается новая локальная переменная p, не имеющая отношения к глобальной p
	console.log(‘result 0’, p); // => 25
}
function test1 (){
	console.log(‘result 1’, p) // => 20, выводится глобальная p
	test2(); // так как мы не передаем параметр, p внутри функции будет undefined
}
function test2 (p){
	console.log(‘result 2’, p); // => undefined, так как выше мы ее вызвали без параметра
	test3(p); // можем вызывать выше определения т.к. функция объявлена с помощью function declaration
	function test3 (k){
		var k=30 ; // переопределение k
		console.log(‘result 3’, k) // => 30
	}
}
function test4 (M){
	test4(); // рекурсивный вызов без условия выхода,будет переполнение стека
	console.log(‘result 4’,M)
}
test(); // => 25
test4(p) // ничего не выведет, потому что не дойдет до console.log,
		//т.к. рекурсивный вызов стоит раньше, а условия выхода из рекурсии нет
test(); // => 25
test3(p) // не можем вызвать, т.к. она определена внутри другой функции, здесь мы ее не видим
сonsole.log(‘result 5’, p) // p нигде не менялась, так что => 20